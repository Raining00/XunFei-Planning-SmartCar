// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: informed_rrt_star_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "informed_rrt_star_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_global_planner {

namespace {

const ::google::protobuf::Descriptor* InformedRRTStarConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InformedRRTStarConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_informed_5frrt_5fstar_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_informed_5frrt_5fstar_5fconfig_2eproto() {
  protobuf_AddDesc_informed_5frrt_5fstar_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "informed_rrt_star_config.proto");
  GOOGLE_CHECK(file != NULL);
  InformedRRTStarConfig_descriptor_ = file->message_type(0);
  static const int InformedRRTStarConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, inaccessible_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, heuristic_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, goal_search_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, dis_threshold_),
  };
  InformedRRTStarConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InformedRRTStarConfig_descriptor_,
      InformedRRTStarConfig::default_instance_,
      InformedRRTStarConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(InformedRRTStarConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformedRRTStarConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_informed_5frrt_5fstar_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InformedRRTStarConfig_descriptor_, &InformedRRTStarConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_informed_5frrt_5fstar_5fconfig_2eproto() {
  delete InformedRRTStarConfig::default_instance_;
  delete InformedRRTStarConfig_reflection_;
}

void protobuf_AddDesc_informed_5frrt_5fstar_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_informed_5frrt_5fstar_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036informed_rrt_star_config.proto\022\026robort"
    "s_global_planner\"\225\001\n\025InformedRRTStarConf"
    "ig\022\036\n\021inaccessible_cost\030\001 \001(\r:\003253\022\033\n\020he"
    "uristic_factor\030\002 \001(\002:\0011\022#\n\025goal_search_t"
    "olerance\030\003 \001(\002:\0040.25\022\032\n\rdis_threshold\030\004 "
    "\001(\002:\0030.2", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "informed_rrt_star_config.proto", &protobuf_RegisterTypes);
  InformedRRTStarConfig::default_instance_ = new InformedRRTStarConfig();
  InformedRRTStarConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_informed_5frrt_5fstar_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_informed_5frrt_5fstar_5fconfig_2eproto {
  StaticDescriptorInitializer_informed_5frrt_5fstar_5fconfig_2eproto() {
    protobuf_AddDesc_informed_5frrt_5fstar_5fconfig_2eproto();
  }
} static_descriptor_initializer_informed_5frrt_5fstar_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InformedRRTStarConfig::kInaccessibleCostFieldNumber;
const int InformedRRTStarConfig::kHeuristicFactorFieldNumber;
const int InformedRRTStarConfig::kGoalSearchToleranceFieldNumber;
const int InformedRRTStarConfig::kDisThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InformedRRTStarConfig::InformedRRTStarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_global_planner.InformedRRTStarConfig)
}

void InformedRRTStarConfig::InitAsDefaultInstance() {
}

InformedRRTStarConfig::InformedRRTStarConfig(const InformedRRTStarConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_global_planner.InformedRRTStarConfig)
}

void InformedRRTStarConfig::SharedCtor() {
  _cached_size_ = 0;
  inaccessible_cost_ = 253u;
  heuristic_factor_ = 1;
  goal_search_tolerance_ = 0.25f;
  dis_threshold_ = 0.2f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InformedRRTStarConfig::~InformedRRTStarConfig() {
  // @@protoc_insertion_point(destructor:roborts_global_planner.InformedRRTStarConfig)
  SharedDtor();
}

void InformedRRTStarConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InformedRRTStarConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InformedRRTStarConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InformedRRTStarConfig_descriptor_;
}

const InformedRRTStarConfig& InformedRRTStarConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_informed_5frrt_5fstar_5fconfig_2eproto();
  return *default_instance_;
}

InformedRRTStarConfig* InformedRRTStarConfig::default_instance_ = NULL;

InformedRRTStarConfig* InformedRRTStarConfig::New(::google::protobuf::Arena* arena) const {
  InformedRRTStarConfig* n = new InformedRRTStarConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InformedRRTStarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_global_planner.InformedRRTStarConfig)
  if (_has_bits_[0 / 32] & 15u) {
    inaccessible_cost_ = 253u;
    heuristic_factor_ = 1;
    goal_search_tolerance_ = 0.25f;
    dis_threshold_ = 0.2f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InformedRRTStarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_global_planner.InformedRRTStarConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inaccessible_cost = 1 [default = 253];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inaccessible_cost_)));
          set_has_inaccessible_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_heuristic_factor;
        break;
      }

      // optional float heuristic_factor = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_heuristic_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heuristic_factor_)));
          set_has_heuristic_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_goal_search_tolerance;
        break;
      }

      // optional float goal_search_tolerance = 3 [default = 0.25];
      case 3: {
        if (tag == 29) {
         parse_goal_search_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_search_tolerance_)));
          set_has_goal_search_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_dis_threshold;
        break;
      }

      // optional float dis_threshold = 4 [default = 0.2];
      case 4: {
        if (tag == 37) {
         parse_dis_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_threshold_)));
          set_has_dis_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_global_planner.InformedRRTStarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_global_planner.InformedRRTStarConfig)
  return false;
#undef DO_
}

void InformedRRTStarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_global_planner.InformedRRTStarConfig)
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (has_inaccessible_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inaccessible_cost(), output);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (has_heuristic_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heuristic_factor(), output);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (has_goal_search_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->goal_search_tolerance(), output);
  }

  // optional float dis_threshold = 4 [default = 0.2];
  if (has_dis_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dis_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_global_planner.InformedRRTStarConfig)
}

::google::protobuf::uint8* InformedRRTStarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_global_planner.InformedRRTStarConfig)
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (has_inaccessible_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inaccessible_cost(), target);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (has_heuristic_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heuristic_factor(), target);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (has_goal_search_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->goal_search_tolerance(), target);
  }

  // optional float dis_threshold = 4 [default = 0.2];
  if (has_dis_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dis_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_global_planner.InformedRRTStarConfig)
  return target;
}

int InformedRRTStarConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_global_planner.InformedRRTStarConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 inaccessible_cost = 1 [default = 253];
    if (has_inaccessible_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inaccessible_cost());
    }

    // optional float heuristic_factor = 2 [default = 1];
    if (has_heuristic_factor()) {
      total_size += 1 + 4;
    }

    // optional float goal_search_tolerance = 3 [default = 0.25];
    if (has_goal_search_tolerance()) {
      total_size += 1 + 4;
    }

    // optional float dis_threshold = 4 [default = 0.2];
    if (has_dis_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformedRRTStarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_global_planner.InformedRRTStarConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InformedRRTStarConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InformedRRTStarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_global_planner.InformedRRTStarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_global_planner.InformedRRTStarConfig)
    MergeFrom(*source);
  }
}

void InformedRRTStarConfig::MergeFrom(const InformedRRTStarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_global_planner.InformedRRTStarConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inaccessible_cost()) {
      set_inaccessible_cost(from.inaccessible_cost());
    }
    if (from.has_heuristic_factor()) {
      set_heuristic_factor(from.heuristic_factor());
    }
    if (from.has_goal_search_tolerance()) {
      set_goal_search_tolerance(from.goal_search_tolerance());
    }
    if (from.has_dis_threshold()) {
      set_dis_threshold(from.dis_threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InformedRRTStarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_global_planner.InformedRRTStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformedRRTStarConfig::CopyFrom(const InformedRRTStarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_global_planner.InformedRRTStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformedRRTStarConfig::IsInitialized() const {

  return true;
}

void InformedRRTStarConfig::Swap(InformedRRTStarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InformedRRTStarConfig::InternalSwap(InformedRRTStarConfig* other) {
  std::swap(inaccessible_cost_, other->inaccessible_cost_);
  std::swap(heuristic_factor_, other->heuristic_factor_);
  std::swap(goal_search_tolerance_, other->goal_search_tolerance_);
  std::swap(dis_threshold_, other->dis_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InformedRRTStarConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InformedRRTStarConfig_descriptor_;
  metadata.reflection = InformedRRTStarConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InformedRRTStarConfig

// optional uint32 inaccessible_cost = 1 [default = 253];
bool InformedRRTStarConfig::has_inaccessible_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InformedRRTStarConfig::set_has_inaccessible_cost() {
  _has_bits_[0] |= 0x00000001u;
}
void InformedRRTStarConfig::clear_has_inaccessible_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
void InformedRRTStarConfig::clear_inaccessible_cost() {
  inaccessible_cost_ = 253u;
  clear_has_inaccessible_cost();
}
 ::google::protobuf::uint32 InformedRRTStarConfig::inaccessible_cost() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.InformedRRTStarConfig.inaccessible_cost)
  return inaccessible_cost_;
}
 void InformedRRTStarConfig::set_inaccessible_cost(::google::protobuf::uint32 value) {
  set_has_inaccessible_cost();
  inaccessible_cost_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.InformedRRTStarConfig.inaccessible_cost)
}

// optional float heuristic_factor = 2 [default = 1];
bool InformedRRTStarConfig::has_heuristic_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InformedRRTStarConfig::set_has_heuristic_factor() {
  _has_bits_[0] |= 0x00000002u;
}
void InformedRRTStarConfig::clear_has_heuristic_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
void InformedRRTStarConfig::clear_heuristic_factor() {
  heuristic_factor_ = 1;
  clear_has_heuristic_factor();
}
 float InformedRRTStarConfig::heuristic_factor() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.InformedRRTStarConfig.heuristic_factor)
  return heuristic_factor_;
}
 void InformedRRTStarConfig::set_heuristic_factor(float value) {
  set_has_heuristic_factor();
  heuristic_factor_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.InformedRRTStarConfig.heuristic_factor)
}

// optional float goal_search_tolerance = 3 [default = 0.25];
bool InformedRRTStarConfig::has_goal_search_tolerance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InformedRRTStarConfig::set_has_goal_search_tolerance() {
  _has_bits_[0] |= 0x00000004u;
}
void InformedRRTStarConfig::clear_has_goal_search_tolerance() {
  _has_bits_[0] &= ~0x00000004u;
}
void InformedRRTStarConfig::clear_goal_search_tolerance() {
  goal_search_tolerance_ = 0.25f;
  clear_has_goal_search_tolerance();
}
 float InformedRRTStarConfig::goal_search_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.InformedRRTStarConfig.goal_search_tolerance)
  return goal_search_tolerance_;
}
 void InformedRRTStarConfig::set_goal_search_tolerance(float value) {
  set_has_goal_search_tolerance();
  goal_search_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.InformedRRTStarConfig.goal_search_tolerance)
}

// optional float dis_threshold = 4 [default = 0.2];
bool InformedRRTStarConfig::has_dis_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InformedRRTStarConfig::set_has_dis_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void InformedRRTStarConfig::clear_has_dis_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void InformedRRTStarConfig::clear_dis_threshold() {
  dis_threshold_ = 0.2f;
  clear_has_dis_threshold();
}
 float InformedRRTStarConfig::dis_threshold() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.InformedRRTStarConfig.dis_threshold)
  return dis_threshold_;
}
 void InformedRRTStarConfig::set_dis_threshold(float value) {
  set_has_dis_threshold();
  dis_threshold_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.InformedRRTStarConfig.dis_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_global_planner

// @@protoc_insertion_point(global_scope)
